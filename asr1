import speech_recognition as sr
import pyttsx3
import pywhatkit
import datetime
import pyaudio
import wikipedia

def talk(message):
    # Initialize the text-to-speech engine
    engine = pyttsx3.init()

    # Set properties, if needed (optional)
    engine.setProperty('rate', 150)  # Speed of speech

    # Speak the given message
    engine.say(message)

    # Wait for the speech to finish
    engine.runAndWait()


def take_command():
    recognizer = sr.Recognizer()

    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        audio = recognizer.listen(source)


    try:
        print("Recognizing...")
        command = recognizer.recognize_google(audio).lower()
        print("You said:", command)
        return command
    except sr.UnknownValueError:
        print("Sorry, I couldn't understand the audio.")
        return ""
    except sr.RequestError as e:
        print("Error with the speech recognition service: {e}")
        return ""


def run_darla():
    talk("I am Darla. What can I do for you?")

    while True:
        command = take_command()
        print(command)
        if 'who is ' in command:
            person = command.replace('who is','')
            info = wikipedia.summary(person,1)
            print(info)
            talk(info)
        elif 'how are you ?' in command:
            talk("gee, im fine thank you")
        elif 'are you single ?' in command:
            talk("im flattered,but no")

        elif 'play' in command:
            song = command.replace('play', '').strip()
            talk('Playing ' + song)
            pywhatkit.playonyt(song)
        elif 'time' in command:
            current_time = datetime.datetime.now().strftime('%H:%M')
            print(current_time)
            talk('The current time is ' + current_time)
        elif 'stop' in command:
            talk("Goodbye!")
            break
        else:
            talk("Sorry, I didn't understand that command.")
            break
        


run_darla()
